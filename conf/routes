# Home page

GET            /                                                 controllers.Aura.index()


########################################################################################################################
# Doctor

# Creates a new doctor
POST           /api/doctor                                       controllers.DoctorController.create()
# Gets information on a single doctor
GET            /api/doctor/:id                                   controllers.DoctorController.read(id : Long)
# Updates the information of a single doctor
PUT            /api/doctor/:id                                   controllers.DoctorController.update(id : Long)
# Get the patients of the given doctor
GET            /api/doctor/:id/patient                           controllers.DoctorController.getPatients(id : Long)
# Notificar a doctor2 para revisar al paciente paciente
POST           /api/doctor/:doctor1/patient/:idP/:doctor2        controllers.DoctorController.notificate(doctor : Long, idP : Long, doctor2 : Long)

# Filters
# Episodes sorted by intensity
GET            /api/doctor/:doctor1/patient/:idP/sorted          controllers.DoctorController.sortEpisodesByIntensity(idP : Long, idD : Long)
# Most critical patients
GET            /api/doctor/:doctor1/patient/critical             controllers.DoctorController.getCriticalPatients(doctor1 : Long)
# Get patients by age
GET            /api/doctor/:idD/patients/age/:age                controllers.DoctorController.getPatientsByAge(idD : Long, age : Integer)


########################################################################################################################
# patient

# Cretes a new Patient with no episodes associated with the given doctor
POST           /api/doctor/:id/patient                           controllers.PatientController.create(id : Long)
# Gets information on a single patient
GET            /api/patient/:id                                  controllers.PatientController.read(id : Long)
# Updates the information of a single patient
PUT            /api/patient/:id                                  controllers.PatientController.update(id : Long)
# Removes a single patient given the ID
DELETE         /api/patient/:id                                  controllers.PatientController.delete(id : Long)
# Adds an episode to a patient
POST           /api/patient/:id/episode                          controllers.PatientController.createEpisode(id : Long)
# Gets the episodes of a patient
GET            /api/patient/:id/episode                          controllers.PatientController.getEpisodes(id : Long)
# Gets a single episode of a patient
GET            /api/patient/:id1/episode/:id2                    controllers.PatientController.getEpisode(id1 : Long, id2 : Long)
# Gets the episodes of a patient in a range of dates (yyyy-mm-dd)
GET            /api/patient/:id/episode/:f1/:f2                  controllers.PatientController.getEpisodesInRange(id : Long, f1 : String, f2 : String)
# Gets the first analysis (Sleep hours) in Json format, semantics is given at the presentation layer
GET            /api/patient/:idP/analysis1/:f1/:f2               controllers.PatientController.getAnalysisSleepHours(idP : Long, f1 : String, f2 : String)
# Gets analysis of episodes and medicines in Json format
GET            /api/patient/:id/analysis2/:f1/:f2                controllers.PatientController.getAnalysisIntensity(id : Long, f1 : String, f2 : String)
# Gets analysis of episodes and food in Json format
GET            /api/patient/:id/analysis3/:f1/:f2                controllers.PatientController.getAnalysisSpot(id : Long, f1 : String, f2 : String)
# Authentication service for a single Patient, if credentials are correct, it should return a simple Patient Object, otherwise, it should return an empty object
POST           /api/patient/authenticate                         controllers.PatientController.authenticate()
# Plain old JSON of a Patient
GET            /api/pojo_patient/:id                             controllers.PatientController.plainPatient(id : Long)
# Creates a recorded episode, it expects an mp3 file. mp3 checking is up to the client
POST           /api/patient/:id/voice_episode                    controllers.PatientController.createVoiceEpisode(id : Long)
########################################################################################################################


GET            /doctor/login                                     controllers.Aura.login()

PUT            /patient/logout/:id                               controllers.PatientController.logout(id : Long)

PUT            /doctor/logout/:id                                controllers.DoctorController.logout(id : Long)

POST           /doctor/authenticate                              controllers.DoctorController.authenticate()

POST           /patient/authenticate                             controllers.PatientController.authenticate()

GET            /info                                             controllers.Aura.info()

# Map static resources from the /public folder to the /assets URL path
GET            /assets/*file                                     controllers.Assets.at(path="/public", file)
OPTIONS        /*path                                            controllers.Aura.token(path: String)
